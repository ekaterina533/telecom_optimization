---
- name: Автоматизация Docker и проверки скрипта
  hosts: localhost
  become: yes
  vars:
    DOCKER_USER: "{{ ansible_user }}"
    IMAGE_NAME: "http-requests"
    CONTAINER_NAME: "http-requests-container"

  tasks:
    - name: Установить зависимости
      apt:
        name:
          - ca-certificates
          - curl
          - gnupg
          - software-properties-common
        state: present
        update_cache: yes

    - name: Добавить GPG-ключ docker
      ansible.builtin.get_url:
        url: https://download.docker.com/linux/ubuntu/gpg
        dest: /etc/apt/trusted.gpg.d/docker.asc
        mode: 0644

    - name: Добавить репозиторий Docker
      apt_repository:
        repo: "deb [arch={{ ansible_architecture }}] https://download.docker.com/linux/ubuntu {{ ansible_distribution_release }} stable"
        state: present

    - name: Установить Docker
      apt:
        name:
          - docker-ce
          - docker-ce-cli
          - containerd.io
        state: latest
        update_cache: yes

    - name: Добавить пользователя в группу docker
      user:
        name: "{{ DOCKER_USER }}"
        groups: docker
        append: yes

    - name: Перезагрузка сервиса Docker
      service:
        name: docker
        state: restarted

    - name: Собрать Docker-образ
      community.docker.docker_image:
        name: "{{ IMAGE_NAME }}"
        build:
          path: ../section2
          pull: yes
        source: build
        state: present

    - name: Запустить контейнер
      community.docker.docker_container:
        name: "{{ CONTAINER_NAME }}"
        image: "{{ IMAGE_NAME }}"
        state: started
        detach: yes

    - name: Проверить статус контейнера
      community.docker.docker_container_info:
        name: "{{ CONTAINER_NAME }}"
      register: container_info

    - name: Убедиться, что контейнер работает
      assert:
        that: container_info.containers[0].State.Status == "running"
        fail_msg: "Контейнер не запущен!"

    - name: Получить логи контейнера
      community.docker.docker_container_logs:
        container: "{{ CONTAINER_NAME }}"
      register: container_logs

    - name: Вывести логи
      debug:
        var: container_logs.log
        verbosity: 1

    - name: Проверить код завершения
      command: docker inspect -f '{{ '{{' }}.State.ExitCode{{ '}}' }}' "{{ CONTAINER_NAME }}"
      register: exit_code
      changed_when: false

    - name: Убедиться, что код завершения 0
      assert:
        that: exit_code.stdout == "0"
        fail_msg: "Скрипт завершился с ошибкой!"